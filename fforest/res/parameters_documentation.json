{
    "usage": "fforest <{param_database}> [options]\n  fforest <{param_database}> <{param_parent_dir}> [options]",
    "help": "Print this help message.\n",

    "training_value": "% of values you want to extract from the database and put\n                         in the train database. The rest will be put in the test \n                         database. You can also pass the number of values you want\n                         to use (by passing an integer greater than 1).\n                         [default: {default_training_value}]\n",
    "reference_value": "% of values you want to extract from the training set and\n                         put in the reference set. The rest will be put in the sub\n                         train database. You can also pass the number of values yo\n                         u want to use (by passing an integer greater than 1).\n                         [default: {default_reference_value}]\n",
    "trees_in_forest": "Number of trees to create in the forest. [default: {default_trees_in_forest}]\n",
    "quality_threshold": "All trees with a quality strictly inferior than this thre\n                         shold is a Low Quality Tree, else it's an High Quality Tr\n                         ee. [default: {default_quality_threshold}]\n",

    "initial_split_method": "The method to use with the initial split of the database\n                         into the train and test databases. Values can be `halfing\n                         ` or `keepdistribution` [default: {default_initial_split_method}]\n",
    "reference_split_method": "The method to use with the split of the train database in\n                         to the reference and subtrain databases. Values can be `h\n                         alfing` or `keepdistribution`. [default: {default_reference_split_method}]\n",
    "subsubtrain_split_method": "The method to use with the split of the subtrain database\n                         into multiple subsubtrain databases. Values can be `halfi\n                         ng` or `keepdistribution`. [default: {default_subsubtrain_split_method}]\n",
    "quality_computing_method": "The method used to compute the quality of a forest. Value\n                         s can be `kapparifqimarsala` [default: {default_quality_computing_method}]\n",
    "clustering_trees_method": "The method used to regroup the resulting trees constructed into multiple heterogeneous fuzzy forest. Values can be `hypersphere` or `jason_forest`. [default: {default_clustering_trees_method}]",

    "train_name": "The name of the train database after the initial split.\n                         [default: {default_train_name}]\n",
    "test_name": "The name of the test database after the initial split.\n                         [default: {default_test_name}]\n",
    "preprocessed_database_name":"The name of the preprocessed database. Its defaulting to\n                         the database name prefixed with '~'.\n",
    "subtrain_name": "The name of the subtrain database after the train split.\n                         [default: {default_subtrain_name}]\n",
    "reference_name": "The name of the reference database after the train split.\n                         [default: {default_reference_name}]\n",
    "statistics_file_name": "The name of the statistics file, dumped at the end of the\n                         program. [default: {default_statistics_name}]\n",
    "header_name": "The name of the header file, extracted from the original\n                         database if it contains one. [default: {default_header_name}]\n",
    "subsubtrain_name_pattern": "The name of the subsubtrain databases after the subtrain\n                         split. It must follows a %s-style rule, which will be rep\n                         laced by the ID of the subsubtrain database.\n                         [default: {default_subsubtrain_name_pattern}]\n",
    "cclassified_vector_prefix": "The prefix of every 'correctly classified' vector created\n                         in every subsubtrain directory. [default: {default_cclassified_vector_prefix}]\n",
    "salammbo_vector_prefix": "The prefix of every 'salammbo' vector created in every su\n                         bsubtrain directory. [default: {default_salammbo_vector_prefix}]\n",
    "difficulty_vector_prefix": "The prefix of every 'difficulty' vector created in the su\n                         btrain directory. [default: {default_difficulty_vector_prefix}]\n",
    "quality_file_prefix":  "The prefix of every 'quality' file created in the subtrai\n                         n directory. [default: {default_quality_file_prefix}]\n",
    "class_matrix_prefix": "The prefix of every 'class matrix' file created in the 'c\n                         lasses matrices' directory. [default: {default_class_matrix_prefix}]\n",
    "tree_file_extension": "The name of the extension for a tree file.\n                         [default: {default_tree_file_extension}]\n",
    "vector_file_extension": "The name of the extension for a vector file.\n                         [default: {default_vector_file_extension}]\n",
    "header_extension": "The extension of the header file, extracted from the orig\n                         inal database if it contains one. [default: {default_header_extension}]\n",

    "main_directory": "The name of the main directory, where all the project wil\n                         l be dumped. It defaults to the name of the database.\n",
    "subtrain_directory": "The name of the subtrain directory, where all the outputs\n                         of the subtrain split will be dumped. [default: {default_subtrain_directory}]\n",
    "subsubtrain_directory": "The name of the subsubtrain directory, where all the subs\n                         ubtrain databases' directories will be dumped.\n                         [default: {default_subsubtrain_directory}]\n",
    "true_class_directory": "The name of the directory containing info about the true class of each instance. It's computed during the 'classes_matrices' and the 'clustering_trees' phases. [default: {default_true_class_directory}]",
    "classes_matrices_directory": "The name of the classes matrices directory, where all the\n                         classes matrices will be dumped.\n                         [default: {default_classes_matrices_directory}]\n",
    "clustering_trees_directory": "The name of directory containing all results of the 'clustering_trees' phase. [default: {default_clustering_trees_directory}]",
    "subsubtrain_directory_pattern": "The name of the subsubtrain directory pattern. Every subs\n                         ubtrain database will be stored in this directory. You ca\n                         n indicate the number placement with a %s-style notation.\n                         [default: {default_subsubtrain_directory_pattern}]\n",

    "discretization_threshold": "Number of different values for an attribute to be discret\n                         ized. [default: {default_discretization_threshold}]\n",
    "entropy_threshold": "The entropy threshold. [default: {default_entropy_threshold}]\n",
    "min_size_leaf": "Minimum size of a leaf. If you pass a value between 0 and\n                         1, it'll be treated as % of the training set. If you pass\n                         an higher integer, it'll be treated as a number of exampl\n                         es. [default: {default_min_size_leaf}]\n",
    "entropy_measure": "The measure used to calculate the entropy. Values can be\n                         `shannon`. [default: {default_entropy_measure}]\n",
    "number_of_tnorms": "The number of t-norms (aggregation of the classification\n                         degree) to use. Each t-norm will create a new vector file\n                         . T-norms are as follows: 0 = Classical classification, 1\n                         = Zadeh's t-norm, 2 = Lukasiewicz's t-norm. [default: {default_number_of_tnorms}]\n",

    "last_phase": "Stop the software when this phase is completed. Values can be `parsing`, `preprocessing`, `initial_split`, `reference_split`, `subsubtrain_split`, `learning`, `reduction`, `quality`, `classes_matrices`, `ending` or `none`. [default: {default_last_phase}]",
    "resume_phase": "Resume the software to the precised phase. The software needs to have already computed a phase equals or greater than the precised phase. Values can be `parsing`, `preprocessing`, `initial_split`, `reference_split`, `subsubtrain_split`, `learning`, `reduction`, `quality`, `classes_matrices`, `ending` or `none`. [default: {default_resume_phase}]",

    "identifier": "The class name of the examples' identifier. You can also\n                         pass an integer, which'll act as the index of the identif\n                         ier column. Indexes start at 0. You can pass the last ind\n                         ex with -1, the before-last with -2, and so on. If you do\n                         n't pass this argument, an index column will be created i\n                         n the preprocessed database. [default: {default_identifier}]\n",
    "class": "The name of the class attribute. You can also pass an int\n                         eger, which'll act as the index of the class column. Inde\n                         xes start at 0. You can pass the last index with -1, the\n                         before-last with -2, and so on.\n",
    "have_header": "This option indicate that the initial database have a hea\n                         der.\n",
    "encoding_input": "The encoding used to read the database. [default: {default_encoding_input}]\n",
    "encoding_output": "The encoding used to write the outputs. [default: {default_encoding_output}]\n",
    "format_input": "The format used to read the database. [default: {default_format_input}]\n",
    "format_output": "The format used to write the outputs. [default: {default_format_output}]\n",
    "delimiter_input": "The symbol used to delimiting data in a CSV input databas\n                         e. [default: {default_delimiter_input}]\n",
    "delimiter_output": "The symbol used to delimiting data in a CSV output databa\n                         se. [default: {default_delimiter_output}]\n",
    "quoting_input": "The usage of the quote character for the input database i\n                         n CSV format. Values can be `all`, `minimal`, `nonnumeric\n                         ` or `none`. [default: {default_quoting_input}]\n",
    "quoting_output": "The usage of the quote character for the output databases\n                         in CSV format. Values can be `all`, `minimal`, `nonnumeri\n                         c` or `none`. [default: {default_quoting_output}]\n",
    "quote_char_input": "The symbol used to quote the required fields for the inpu\n                         t database in CSV format. [default: {default_quote_char_input}]\n",
    "quote_char_output": "The symbol used to quote the required fields for the outp\n                         ut databases in CSV format. [default: {default_quote_char_output}]\n",
    "line_delimiter_input": "The symbol used to mark a newline for the input database.\n                         [default: {default_line_delimiter_input}]\n",
    "line_delimiter_output": "The symbol used to mark a newline for the output database\n                         . [default: {default_line_delimiter_output}]\n",
    "verbosity": "Change the output behavior of the software. Values can be\n                         `quiet`, `normal` or `verbose`. [default: {default_verbosity}]\n"
}